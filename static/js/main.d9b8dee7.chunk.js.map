{"version":3,"sources":["ticket.js","table.js","newTicket.js","App.js","serviceWorker.js","index.js"],"names":["Ticket","onDragStart","ev","id","dataTransfer","setData","onDeleteTicket","preventDefault","_this","props","_this2","this","_this$props","ticketID","title","date","detail","status","react_default","a","createElement","e","draggable","className","concat","type","aria-label","onClick","aria-hidden","Component","Table","state","showForm","onDragOver","onDrop","tickets","onDropTicket","map","ticket","src_ticket_0","key","NewTicket","setState","target","value","onSendTicket","event","_this$state","onSubmit","placeholder","onChange","onChangeTitle","onChangeStatus","defaultValue","onChangeDetail","displayForm","App","lastID","tables","cat","getData","filter","tiket","Object","defineProperty","index","findIndex","x","splice","newTitle","newStatus","newDetail","push","currentTickets","table","src_table_0","src_newTicket","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9b8dee7.chunk.js","sourcesContent":["import React, { Component }  from 'react'\r\n\r\nimport './ticket.css'\r\n\r\nclass Ticket extends Component {\r\n   \r\n    onDragStart = (ev,id) => {\r\n        ev.dataTransfer.setData(\"id\",id);\r\n    }\r\n\r\n    onDeleteTicket = (ev,id) => {\r\n        ev.preventDefault();\r\n        this.props.onDeleteTicket(id);\r\n    }\r\n    render(){\r\n        const {ticketID,title,date,detail,status} = this.props;\r\n\r\n        return(\r\n            <div \r\n                onDragStart = {(e) => this.onDragStart(e,ticketID)}\r\n                draggable \r\n                className={`ticket ${status} draggable badge col-md-12`} \r\n                date={date} \r\n            >\r\n                <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={e => this.onDeleteTicket(e,ticketID)}>\r\n                    <span aria-hidden=\"true\">&times;</span>\r\n                </button>\r\n                <h3>{title}</h3>\r\n                <span>{detail}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Ticket","import React, { Component } from 'react'\r\n\r\nimport Ticket from './ticket.js'\r\nimport './table.css'\r\nclass Table extends Component {\r\n\r\n    state ={\r\n        title:\"\",\r\n        status:\"desire\",\r\n        detail:\"\",\r\n        showForm: \"hide\",\r\n    }\r\n\r\n    onDragOver  = (ev) => {\r\n        ev.preventDefault();\r\n    }\r\n\r\n    onDropTicket(e,status) {\r\n        e.preventDefault();\r\n        this.props.onDrop(e,status);\r\n    }\r\n\r\n    render() {\r\n        const {status,tickets,onDeleteTicket} = this.props;\r\n        return(\r\n            <div className={'table-droppable col-md-12 table-'+status+' droppable container-fluid row'} \r\n                onDragOver={(e)=>this.onDragOver(e)} \r\n                onDrop={(e)=>{this.onDropTicket(e, status)}}\r\n            >\r\n                <div className={\"col-md-12\"}><span className={\"label label-default\"}>{status}</span></div>\r\n                <div \r\n                    className=\"col-md-12\" \r\n                >\r\n                {tickets.map((ticket) =>(\r\n                    <Ticket key={ticket.id} ticketID={ticket.id} title={ticket.title} date=\"20190101\" detail={ticket.detail} status={status} onDeleteTicket={onDeleteTicket} />\r\n                ))}\r\n                </div>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n\r\n\r\nexport default Table","import React, { Component } from 'react';\r\n\r\nimport './newTicket.css'\r\n\r\nclass NewTicket extends Component {\r\n\r\n    state ={\r\n        title:\"\",\r\n        status:\"desire\",\r\n        detail:\"\",\r\n        showForm: \"hide\",\r\n    }\r\n    onChangeTitle(e) {\r\n        this.setState({title: e.target.value});\r\n    }\r\n    onChangeStatus(e) {\r\n        this.setState({status: e.target.value});\r\n    }\r\n    onChangeDetail(e) {\r\n        this.setState({detail: e.target.value});\r\n    }\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        this.setState({ title:\"\", status:\"\", detail:\"\",});\r\n        this.props.onSendTicket(this.state.title,this.state.status,this.state.detail);\r\n      }\r\n    \r\n    displayForm(e,event){\r\n        e.preventDefault();\r\n        this.setState({showForm:event})\r\n    }\r\n\r\n  render() {\r\n    const {title,detail,showForm} = this.state\r\n    return (\r\n      <div className=\"Input\">\r\n        {showForm===\"show\" ? (    \r\n        <form className=\"form-newticket form-horizontal\" onSubmit={e => this.onSubmit(e)}>\r\n          <div className=\"container-fluid row\"><span className=\"col-md-12 label label-default label-form\">Nouveau ticket</span></div>\r\n          <div className=\"form-group\">\r\n            <label className=\"col-sm-2 control-label\">Titre</label>\r\n            <div className=\"col-sm-10\">\r\n                <input\r\n                    value={title}\r\n                    id=\"titleTicket\"\r\n                    type=\"text\"\r\n                    placeholder=\"\"\r\n                    onChange={e => this.onChangeTitle(e)}\r\n                />\r\n            </div>\r\n          </div><div className=\"form-group\">\r\n            <label className=\"col-sm-2 control-label\">Status</label>\r\n            <div className=\"col-sm-10\">\r\n                <select className=\"form-control\" onChange={e => this.onChangeStatus(e)}>\r\n                    <option value=\"desire\">Envie</option>\r\n                    <option value=\"planned\">Prévu</option>\r\n                    <option value=\"current\">En cours</option>\r\n                    <option value=\"finished\">Déjà fait</option>\r\n                </select>\r\n            </div>\r\n          </div><div className=\"form-group\">\r\n            <label className=\"col-sm-2 control-label\">Détail</label>\r\n            <div className=\"col-sm-10\">\r\n                <input\r\n                    defaultValue={detail}\r\n                    type=\"text\"\r\n                    placeholder=\"\"\r\n                    onChange={e => this.onChangeDetail(e)}/>\r\n            </div>\r\n          </div>\r\n          <button type=\"button\" className=\"btn btn-default\" onClick={e => this.displayForm(e,\"hide\")}>Annuler</button>\r\n          <button type=\"submit\" className=\"btn btn-success\">Ajouter</button>\r\n        </form>\r\n        ) : (\r\n        <button type=\"button\" className=\"btn btn-primary\" onClick={e => this.displayForm(e,\"show\")}>Nouveau Ticket</button>)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTicket;","import React, { Component } from 'react'\r\nimport { Button } from 'react-bootstrap'\r\n\r\nimport './App.css'\r\nimport './bootstrap.css'\r\n\r\nimport Table from './table.js'\r\nimport NewTicket from './newTicket';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n        lastID: 7,\r\n        tables : ['desire','planned','current','finished'],\r\n        tickets :[\r\n            {\r\n              id:1,\r\n              status:'desire',\r\n              title:'Amerique du Sud',\r\n              detail:'un jour peut-être',\r\n            },\r\n            {\r\n              id:2,\r\n              status:'finished',\r\n              title:'Japan',\r\n              detail:'ZEeeeeeen !!!',\r\n            },\r\n            {\r\n                id:3,\r\n              status:'planned',\r\n              title:'Sri Lanka',\r\n              detail:'Bientôt !!!',\r\n            },\r\n            {\r\n                id:4,\r\n              status:'finished',\r\n              title:'Norway',\r\n              detail:'Mouillé !!!',\r\n            },\r\n            {\r\n                id:5,\r\n              status:'current',\r\n              title:'Lyon',\r\n              detail:'Trop long !!!',\r\n            },\r\n            {\r\n                id:6,\r\n              status:'finished',\r\n              title:'Asia 2k18',\r\n              detail:'Enorme !!!',\r\n            },\r\n        ]\r\n    }\r\n\r\n    onDrop = (ev, cat) => {\r\n        let id = ev.dataTransfer.getData(\"id\");\r\n        let tickets = this.state.tickets.filter((tiket) => {\r\n            if (tiket.id == id) {\r\n                tiket.status = cat;           \r\n            }              \r\n             return tiket;       \r\n         });        \r\n         this.setState({         \r\n            tickets,           \r\n            tickets       \r\n         });    \r\n      }\r\n    \r\n    onDeleteTicket = (id) => {\r\n        const tickets = this.state.tickets\r\n        let index = tickets.findIndex(x => x.id ===id)\r\n        tickets.splice(index,1)\r\n        this.setState({tickets:tickets})\r\n    }\r\n\r\n    onSendTicket = (newTitle,newStatus,newDetail) => {\r\n        const tickets = this.state.tickets\r\n        let lastID = this.state.lastID\r\n        tickets.push({\r\n          id:lastID,\r\n          title: newTitle,\r\n          status: newStatus,\r\n          detail:newDetail\r\n        })\r\n        this.setState({tickets: tickets,lastID: lastID+1})\r\n      }\r\n      \r\n    render() {\r\n      const {tables,tickets} = this.state\r\n      let currentTickets\r\n      return (\r\n        <div>\r\n            <nav className=\"navbar navbar-dark bg-dark\">\r\n                <span className=\"navbar-brand mb-0 h1\">Pounda</span>\r\n            </nav>\r\n            <div className='main-container container-fluid row'>\r\n                {tables.map((table) => (\r\n                    currentTickets = [],\r\n                    tickets.map((ticket) =>(\r\n                        table === ticket.status ? currentTickets.push(ticket) : 0\r\n                    )),\r\n                    <div  key={table} className={\"table-container col-md-3 container-fluid row\"}>\r\n                        <Table status={table} tickets={currentTickets} onDrop={this.onDrop} onDeleteTicket={this.onDeleteTicket}/>\r\n                    </div>\r\n                ))}\r\n                <div className={\"form-container col-md-2 container-fluid row\"}><NewTicket onSendTicket={this.onSendTicket} /></div>\r\n            </div>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n  \r\n  export default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}